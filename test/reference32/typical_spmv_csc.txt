julia> A = @fiber(d(sl(e(0.0))), [0 0 3.3; 1.1 0 0; 2.2 0 4.4; 0 0 5.5])
Dense [:,1:3]
├─[:,1]: SparseList (0.0) [1:4]
│ ├─[2]: 1.1
│ ├─[3]: 2.2
├─[:,2]: SparseList (0.0) [1:4]
├─[:,3]: SparseList (0.0) [1:4]
│ ├─[1]: 3.3
│ ├─[3]: 4.4
│ ├─[4]: 5.5
julia> y = fiber!([1.0, 2.0, 3.0, 4.0])
Dense [1:4]
├─[1]: 1.0
├─[2]: 2.0
├─[3]: 3.0
├─[4]: 4.0
julia> x = fiber!([1, 2, 3])
Dense [1:3]
├─[1]: 1
├─[2]: 2
├─[3]: 3
julia> @finch_code begin
        y .= 0
        for j = _
            for i = _
                y[i] += A[i, j] * x[j]
            end
        end
    end
quote
    y_lvl = (ex.bodies[1]).tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    y_lvl_3 = (ex.bodies[2]).body.body.lhs.tns.tns.lvl
    y_lvl_4 = y_lvl_3.lvl
    A_lvl = ((ex.bodies[2]).body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = ((ex.bodies[2]).body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    resize_if_smaller!(y_lvl_2.val, A_lvl_2.shape)
    fill_range!(y_lvl_2.val, 0.0, 1, A_lvl_2.shape)
    for j_4 = 1:A_lvl.shape
        x_lvl_q = (1 - 1) * x_lvl.shape + j_4
        A_lvl_q = (1 - 1) * A_lvl.shape + j_4
        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
        if A_lvl_2_q < A_lvl_2_q_stop
            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
        else
            A_lvl_2_i = 1
            A_lvl_2_i1 = 0
        end
        i = 1
        i_start = i
        phase_stop = (min)(A_lvl_2.shape, A_lvl_2_i1)
        if phase_stop >= i_start
            i_4 = i
            i = i_start
            if A_lvl_2.idx[A_lvl_2_q] < i_start
                A_lvl_2_q = scansearch(A_lvl_2.idx, i_start, A_lvl_2_q, A_lvl_2_q_stop - 1)
            end
            while i <= phase_stop
                i_start_2 = i
                A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                phase_stop_2 = (min)(A_lvl_2_i, phase_stop)
                i_5 = i
                if A_lvl_2_i == phase_stop_2
                    A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                    i_6 = phase_stop_2
                    y_lvl_q = (1 - 1) * A_lvl_2.shape + i_6
                    y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q])
                    A_lvl_2_q += 1
                else
                end
                i = phase_stop_2 + 1
            end
            i = phase_stop + 1
        end
        i_start = i
        if A_lvl_2.shape >= i_start
            i_7 = i
            i = A_lvl_2.shape + 1
        end
    end
    qos = 1 * A_lvl_2.shape
    resize!(y_lvl_2.val, qos)
    (y = Fiber((Finch.DenseLevel){Int32}(y_lvl_2, A_lvl_2.shape)),)
end
julia> @finch begin
        y .= 0
        for j = _
            for i = _
                y[i] += A[i, j] * x[j]
            end
        end
    end
(y = Fiber(Dense{Int32}(Element{0.0, Float64}([9.899999999999999, 1.1, 15.400000000000002, 16.5]), 4)),)

