broadcast tests
julia> A = Tensor(Dense(SparseList(Element(0.0))), [0.0 0.0 4.4; 1.1 0.0 0.0; 2.2 0.0 5.5; 3.3 0.0 0.0])
Dense [:,1:3]
├─[:,1]: SparseList (0.0) [1:4]
│ ├─[2]: 1.1
│ ├─[3]: 2.2
│ ├─[4]: 3.3
├─[:,2]: SparseList (0.0) [1:4]
├─[:,3]: SparseList (0.0) [1:4]
│ ├─[1]: 4.4
│ ├─[3]: 5.5
julia> B = [1, 2, 3, 4]
4-element Vector{Int64}:
 1
 2
 3
 4
julia> C = A .+ B

julia> AsArray(C)
4×3 AsArray{Float64, 2, Tensor{DenseLevel{Int64, DenseLevel{Int64, ElementLevel{0.0, Float64, Int64, Vector{Float64}}}}, Float64, 2}}:
 1.0  1.0  5.4
 3.1  2.0  2.0
 5.2  3.0  8.5
 7.3  4.0  4.0
julia> D = A .* B

julia> AsArray(D)
4×3 AsArray{Float64, 2, Tensor{DenseLevel{Int64, SparseListLevel{Int64, Vector{Int64}, Vector{Int64}, ElementLevel{0.0, Float64, Int64, Vector{Float64}}}}, Float64, 2}}:
  0.0  0.0   4.4
  2.2  0.0   0.0
  6.6  0.0  16.5
 13.2  0.0   0.0
julia> E = ifelse.(A .== 0, 1, 2)
Dense [:,1:3]
├─[:,1]: Dense [1:4]
│ ├─[1]: 1
│ ├─[2]: 2
│ ├─[3]: 2
│ ├─[4]: 2
├─[:,2]: Dense [1:4]
│ ├─[1]: 1
│ ├─[2]: 1
│ ├─[3]: 1
│ ├─[4]: 1
├─[:,3]: Dense [1:4]
│ ├─[1]: 2
│ ├─[2]: 1
│ ├─[3]: 2
│ ├─[4]: 1
julia> AsArray(E)
4×3 AsArray{Any, 2, Tensor{DenseLevel{Int64, DenseLevel{Int64, ElementLevel{1, Any, Int64, Vector{Any}}}}, Any, 2}}:
 1  1  2
 2  1  1
 2  1  2
 2  1  1

