chunkmask tests
julia> A = Tensor(Dense(Dense(Element(0.0))), 15, 3)
Dense [:,1:3]
├─[:,1]: Dense [1:15]
│ ├─[1]: 0.0
│ ├─[2]: 0.0
│ │ ⋮
│ ├─[14]: 0.0
│ ├─[15]: 0.0
├─[:,2]: Dense [1:15]
│ ├─[1]: 0.0
│ ├─[2]: 0.0
│ │ ⋮
│ ├─[14]: 0.0
│ ├─[15]: 0.0
├─[:,3]: Dense [1:15]
│ ├─[1]: 0.0
│ ├─[2]: 0.0
│ │ ⋮
│ ├─[14]: 0.0
│ ├─[15]: 0.0
julia> @finch begin
        let m = Finch.chunkmask(5, 1:15)
            for i = _
                for j = _
                    A[j, i] = m[j, i]
                end
            end
        end
    end
(A = Tensor(Dense{Int64}(Dense{Int64}(Element{0.0, Float64, Int64}([1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0]), 15), 3)),)
julia> AsArray(A)
15×3 AsArray{Float64, 2, Tensor{DenseLevel{Int64, DenseLevel{Int64, ElementLevel{0.0, Float64, Int64, Vector{Float64}}}}, Float64, 2}}:
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  0.0  1.0
 0.0  0.0  1.0
 0.0  0.0  1.0
 0.0  0.0  1.0
 0.0  0.0  1.0
julia> A = Tensor(Dense(Dense(Element(0.0))), 14, 3)
Dense [:,1:3]
├─[:,1]: Dense [1:14]
│ ├─[1]: 0.0
│ ├─[2]: 0.0
│ │ ⋮
│ ├─[13]: 0.0
│ ├─[14]: 0.0
├─[:,2]: Dense [1:14]
│ ├─[1]: 0.0
│ ├─[2]: 0.0
│ │ ⋮
│ ├─[13]: 0.0
│ ├─[14]: 0.0
├─[:,3]: Dense [1:14]
│ ├─[1]: 0.0
│ ├─[2]: 0.0
│ │ ⋮
│ ├─[13]: 0.0
│ ├─[14]: 0.0
julia> @finch begin
        let m = Finch.chunkmask(5, 1:14)
            for i = _
                for j = _
                    A[j, i] = m[j, i]
                end
            end
        end
    end
(A = Tensor(Dense{Int64}(Dense{Int64}(Element{0.0, Float64, Int64}([1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0]), 14), 3)),)
julia> AsArray(A)
14×3 AsArray{Float64, 2, Tensor{DenseLevel{Int64, DenseLevel{Int64, ElementLevel{0.0, Float64, Int64, Vector{Float64}}}}, Float64, 2}}:
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 1.0  0.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  1.0  0.0
 0.0  0.0  1.0
 0.0  0.0  1.0
 0.0  0.0  1.0
 0.0  0.0  1.0

